import "../../../dataclasses/CDTCHandler/models/CDTCHandler.ed_dclass";
import "../../../dataclasses/CDTMList/models/CDTMList.ed_dclass";
import "../../../protocols/CPTMChannelCtrl/models/CPTMChannelCtrl.ed_prot";
import "../../../protocols/CPBKGTCExecCtrl/models/CPBKGTCExecCtrl.ed_prot";
import "../../../protocols/EDROOMServiceLibrary/models/EDROOMServiceLibrary.ed_prot";



/**
 * \class   CCBKGTCExec
 *
 */


proactive component CCBKGTCExec{

	uri := es.uah.aut.srg.edroom.mclev.cmp.CCBKGTCExec;
	version := v1;
	stack_size := 1024;
	def_max_nb_messages := 10;


	structure {

		ports {


			system port EDROOMsl
			{
				id:= 0;
				protocol:= EDROOMServiceLibrary(v1);
			};
			conjugated  external port TMChannelCtrl {
				id := 1;
				cardinality := 1;
				protocol := CPTMChannelCtrl(v1);

			};

			external port BKGTCExecCtrl {
				id := 2;
				cardinality := 1;
				protocol := CPBKGTCExecCtrl(v1);

			};



		};


		data pools {
			CDTMList(v1) CEDROOMPoolCDTMList[10];

		};


	};


	behaviour {

		contexts {


			context Top_0{


				id := 0;


				variables {
					variable VCurrentTMList{
					 class := CDTMList(v1);

					 constructor := "";
					 dimension := 0;
					};


				};


				states {
					state I{
						id := 0;
					};
					state Ready{
						id := 1;
					};
				};


				init state := I;


				items{
					/**
					 * \brief  
					 */

					msgdatahandler FExecBKGTC {
						code {
							<code>
								
									// Data access
								
								// ... =varSBKGTC;
							   CDEventList TCExecEventList;  
							   PUS_BKGTCExecutor::ExecTC(varSBKGTC,VCurrentTMList,TCExecEventList);


							</code>
						};

						port :=BKGTCExecCtrl;

						message :=CPBKGTCExecCtrl(v1)::SBKGTC;

					};

					/**
					 * \brief  
					 */

					invoke FInvokeTxTMList {
						code {
							<code>
								
									// Complete Data 
								
								*pSTxTM_Data=VCurrentTMList;
								VCurrentTMList.Clean();


							</code>
						};

						port :=TMChannelCtrl;

						message :=CPTMChannelCtrl(v1)::STxTM;

						priority :=1;

					};


				};


				transitions{

					transition Init{
						id := 0;
						source := I;
						sink := Ready;



						asynchronous trigger {
							port := EDROOMsl;
							message := EDROOMServiceLibrary(v1)::EDROOMStart;
						};
					};

					transition ExecTC{
						id := 1;
						source := Ready;
						sink := Ready;


						msgdatahandler := FExecBKGTC;

						handshakes{
							handshake{
								invoke := FInvokeTxTMList;
							};
						};


						asynchronous trigger {
							port := BKGTCExecCtrl;
							message := CPBKGTCExecCtrl(v1)::SBKGTC;
						};
					};


				};


			};


		};

		top context := Top_0;


	};


};